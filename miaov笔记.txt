v-on 绑定事件
v-bind 绑定属性
:class="{active:off}" 绑定class
@keyup.13=''  绑定事件
自定义指令： 

   directive:{}
   钩子函数：（详情参考官网）
     updata 被绑定元素所在模板更新时调用
     钩子函数中参数：
         el:指令所绑定的元素，可以用来直接操作dom
         binding：一个对象
            value:指令的绑定值
这里自定义一个focus指令：
   directive:{
      'focus':{  //指令的名称
         update(el,binding){
           if(binding.value){
              el.focus();
           }
         }
      }
   }

调用方法：v-focus=""

在{{}}可以进行运算，不可以带分号

任务：
1、使用esc退出取消保存，回到原来的值
2、enter时和失去焦点是保存修改
3、统计未完成的任务

计算属性：
    computed:{
       noCheckedLength:function(){
         return this.list.filter(function(item){
           return !item.isChecked
         }).length
       }
    }
	调用方法：
	{{noCheckLength}}


watch深度监控数据：
    使用本地存储模拟后台

    watch:{
      //浅监控，不能监控内层的变化
      list:function(){  //监控list,当list发生变化时触发函数
        
      }
      //深度监控
      list；{
        header:function(){

        },
        depp:true
      }
    }

利用hash过滤数据：
 原生获取哈希值
   window.addEventListener('hashchange',function(){
      var hash=window.loaction.hash
   })

  添加计算属性：
    filterList:function(){
      var filter={
        all:function(list){
         return list
        },
        finished:function(){
         return list.filter(function(item){
            return item.isChecked;
         })
        },
        unfinished:function(){
          return list.filter(function(item){
            return !item.isChecked;
          })
        }
      }
      找到过滤后的函数就返回过滤后的数据，没有就返回list
      return filter[this.visibility] ? filter[this.visibility](list):list;
    }

   练习：使用哈希进行数据过滤，选中的以及未选中的

组件：{element组件库}
   复用
   便于维护
  基本组成结构：
    样式  行为  数据
  在vue里组件就是自定义标签
  使用组件是template里的东西可以用``，包住，在1按钮隔壁
  使用全局组件，必须在全局组件后要实例化一个该vue实例，不能在他之前实例化
  全局注册，可以在任意地方调用，局部注册只能在挂载的元素里使用
  
  
props:传递数据
   父组件》子组件
      在组件中自定义标签绑定自定义属性，组件中使用props:[''],
	  然后再组件中绑定数据即可
	  在组件中定义数据data，是写在函数里
      data:function(){
	     return {select；false}
	  }
      那么在使用的时候便可以不用共用数据	  
   使用is扩展html
     如果想要在table或一些只允许放特定标签的元素里添加自定义组件
	 可以使用is来绑定
	
v-bind绑定动态数据
  有个vueX解决组件之间的通信

  子组件》父组件通信
  触发自定义事件，给组件绑定自定义事件;
  在组件程序中使用methods里,定义this.$emit(),触发发自定义事件,通过传参的方式和父级进行通信
  详情查看练习

vue绑定class
  :class="{active:visible=='all'}"
  根据布尔值给active添加进去

单向数据流：
  不能直接改变父级的数据，那么如何改呢
  在data里重新定义一个和父级一样的初始值，然后渲染这个初始值就可以了；

  使用computed,计算属性依赖于data里的数据

props验证：
  props:{
     count:{
       type:number,
       defalut:10 //默认为10，不传的情况下
       required:true //必传
       //自定义验证规则
       validator:function(value){
          return value>10
       }
     }
  }

slot分发内容：
  （难点，重点）
   在自定义标签里填入的东西是默认不显示
   但如果在组件里添加slot标签，那么slot里的内容就会替换成自定义标签里的内容
   替换指定的slot:
      给slot起个name，在自定义便签内，添加slot属性为name值为相应的name值，也可以使用template添加slot值，在里面批量添加，如果没有写name,那么就会替换无名的slot,同样也可以使用slot替换相应数据,不过数据是父组件的
封3个组件，模态框，弹窗，树形菜单：
    组件的主要特点：
        重用性 --能够公用和通用
        可定制性 --可设置参数和属性
        高内聚性 --功能完整
        互操作性 --多组件协同工作
    Vue组件的api来自三部分
      props参数   传递数据给组件
      slot定制模板  外部模板混合子组件模板
      event自定义事件  监控子组件交互状态

练习1：封装模态框
练习2: 封装alert提醒








     	
  

